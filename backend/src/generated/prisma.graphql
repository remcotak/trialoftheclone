# source: https://eu1.prisma.sh/remco-tak-12c628/trails-of-the-clone/dev
# timestamp: Mon Dec 24 2018 13:49:15 GMT+0100 (Central European Standard Time)

type Adventure implements Node {
  id: ID!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  isAlive: Boolean!
  act: Int!
  page: Int!
}

"""A connection to a list of items."""
type AdventureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AdventureEdge]!
  aggregate: AggregateAdventure!
}

input AdventureCreateInput {
  title: String!
  isAlive: Boolean
  act: Int
  page: Int
}

input AdventureCreateManyInput {
  create: [AdventureCreateInput!]
  connect: [AdventureWhereUniqueInput!]
}

"""An edge in a connection."""
type AdventureEdge {
  """The item at the end of the edge."""
  node: Adventure!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AdventureOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isAlive_ASC
  isAlive_DESC
  act_ASC
  act_DESC
  page_ASC
  page_DESC
}

type AdventurePreviousValues {
  id: ID!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  isAlive: Boolean!
  act: Int!
  page: Int!
}

input AdventureScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AdventureScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdventureScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdventureScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  isAlive: Boolean

  """All values that are not equal to given value."""
  isAlive_not: Boolean
  act: Int

  """All values that are not equal to given value."""
  act_not: Int

  """All values that are contained in given list."""
  act_in: [Int!]

  """All values that are not contained in given list."""
  act_not_in: [Int!]

  """All values less than the given value."""
  act_lt: Int

  """All values less than or equal the given value."""
  act_lte: Int

  """All values greater than the given value."""
  act_gt: Int

  """All values greater than or equal the given value."""
  act_gte: Int
  page: Int

  """All values that are not equal to given value."""
  page_not: Int

  """All values that are contained in given list."""
  page_in: [Int!]

  """All values that are not contained in given list."""
  page_not_in: [Int!]

  """All values less than the given value."""
  page_lt: Int

  """All values less than or equal the given value."""
  page_lte: Int

  """All values greater than the given value."""
  page_gt: Int

  """All values greater than or equal the given value."""
  page_gte: Int
}

type AdventureSubscriptionPayload {
  mutation: MutationType!
  node: Adventure
  updatedFields: [String!]
  previousValues: AdventurePreviousValues
}

input AdventureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AdventureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdventureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdventureSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AdventureWhereInput
}

input AdventureUpdateDataInput {
  title: String
  isAlive: Boolean
  act: Int
  page: Int
}

input AdventureUpdateInput {
  title: String
  isAlive: Boolean
  act: Int
  page: Int
}

input AdventureUpdateManyDataInput {
  title: String
  isAlive: Boolean
  act: Int
  page: Int
}

input AdventureUpdateManyInput {
  create: [AdventureCreateInput!]
  connect: [AdventureWhereUniqueInput!]
  disconnect: [AdventureWhereUniqueInput!]
  delete: [AdventureWhereUniqueInput!]
  update: [AdventureUpdateWithWhereUniqueNestedInput!]
  updateMany: [AdventureUpdateManyWithWhereNestedInput!]
  deleteMany: [AdventureScalarWhereInput!]
  upsert: [AdventureUpsertWithWhereUniqueNestedInput!]
}

input AdventureUpdateManyMutationInput {
  title: String
  isAlive: Boolean
  act: Int
  page: Int
}

input AdventureUpdateManyWithWhereNestedInput {
  where: AdventureScalarWhereInput!
  data: AdventureUpdateManyDataInput!
}

input AdventureUpdateWithWhereUniqueNestedInput {
  where: AdventureWhereUniqueInput!
  data: AdventureUpdateDataInput!
}

input AdventureUpsertWithWhereUniqueNestedInput {
  where: AdventureWhereUniqueInput!
  update: AdventureUpdateDataInput!
  create: AdventureCreateInput!
}

input AdventureWhereInput {
  """Logical AND on all given filters."""
  AND: [AdventureWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdventureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdventureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  isAlive: Boolean

  """All values that are not equal to given value."""
  isAlive_not: Boolean
  act: Int

  """All values that are not equal to given value."""
  act_not: Int

  """All values that are contained in given list."""
  act_in: [Int!]

  """All values that are not contained in given list."""
  act_not_in: [Int!]

  """All values less than the given value."""
  act_lt: Int

  """All values less than or equal the given value."""
  act_lte: Int

  """All values greater than the given value."""
  act_gt: Int

  """All values greater than or equal the given value."""
  act_gte: Int
  page: Int

  """All values that are not equal to given value."""
  page_not: Int

  """All values that are contained in given list."""
  page_in: [Int!]

  """All values that are not contained in given list."""
  page_not_in: [Int!]

  """All values less than the given value."""
  page_lt: Int

  """All values less than or equal the given value."""
  page_lte: Int

  """All values greater than the given value."""
  page_gt: Int

  """All values greater than or equal the given value."""
  page_gte: Int
}

input AdventureWhereUniqueInput {
  id: ID
}

type AggregateAdventure {
  count: Int!
}

type AggregateAspect {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateStats {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWeapon {
  count: Int!
}

type Aspect implements Node {
  id: ID!
  title: String!
  effect: String!
}

"""A connection to a list of items."""
type AspectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AspectEdge]!
  aggregate: AggregateAspect!
}

input AspectCreateInput {
  title: String!
  effect: String!
}

"""An edge in a connection."""
type AspectEdge {
  """The item at the end of the edge."""
  node: Aspect!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AspectOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  effect_ASC
  effect_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AspectPreviousValues {
  id: ID!
  title: String!
  effect: String!
}

type AspectSubscriptionPayload {
  mutation: MutationType!
  node: Aspect
  updatedFields: [String!]
  previousValues: AspectPreviousValues
}

input AspectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AspectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AspectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AspectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AspectWhereInput
}

input AspectUpdateInput {
  title: String
  effect: String
}

input AspectUpdateManyMutationInput {
  title: String
  effect: String
}

input AspectWhereInput {
  """Logical AND on all given filters."""
  AND: [AspectWhereInput!]

  """Logical OR on all given filters."""
  OR: [AspectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AspectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  effect: String

  """All values that are not equal to given value."""
  effect_not: String

  """All values that are contained in given list."""
  effect_in: [String!]

  """All values that are not contained in given list."""
  effect_not_in: [String!]

  """All values less than the given value."""
  effect_lt: String

  """All values less than or equal the given value."""
  effect_lte: String

  """All values greater than the given value."""
  effect_gt: String

  """All values greater than or equal the given value."""
  effect_gte: String

  """All values containing the given string."""
  effect_contains: String

  """All values not containing the given string."""
  effect_not_contains: String

  """All values starting with the given string."""
  effect_starts_with: String

  """All values not starting with the given string."""
  effect_not_starts_with: String

  """All values ending with the given string."""
  effect_ends_with: String

  """All values not ending with the given string."""
  effect_not_ends_with: String
}

input AspectWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Item implements Node {
  id: ID!
  title: String!
  effect: String!
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  title: String!
  effect: String!
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  effect_ASC
  effect_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ItemPreviousValues {
  id: ID!
  title: String!
  effect: String!
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

input ItemUpdateInput {
  title: String
  effect: String
}

input ItemUpdateManyMutationInput {
  title: String
  effect: String
}

input ItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  effect: String

  """All values that are not equal to given value."""
  effect_not: String

  """All values that are contained in given list."""
  effect_in: [String!]

  """All values that are not contained in given list."""
  effect_not_in: [String!]

  """All values less than the given value."""
  effect_lt: String

  """All values less than or equal the given value."""
  effect_lte: String

  """All values greater than the given value."""
  effect_gt: String

  """All values greater than or equal the given value."""
  effect_gte: String

  """All values containing the given string."""
  effect_contains: String

  """All values not containing the given string."""
  effect_not_contains: String

  """All values starting with the given string."""
  effect_starts_with: String

  """All values not starting with the given string."""
  effect_not_starts_with: String

  """All values ending with the given string."""
  effect_ends_with: String

  """All values not ending with the given string."""
  effect_not_ends_with: String
}

input ItemWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createAspect(data: AspectCreateInput!): Aspect!
  createItem(data: ItemCreateInput!): Item!
  createStats(data: StatsCreateInput!): Stats!
  createWeapon(data: WeaponCreateInput!): Weapon!
  createAdventure(data: AdventureCreateInput!): Adventure!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateAspect(data: AspectUpdateInput!, where: AspectWhereUniqueInput!): Aspect
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateStats(data: StatsUpdateInput!, where: StatsWhereUniqueInput!): Stats
  updateWeapon(data: WeaponUpdateInput!, where: WeaponWhereUniqueInput!): Weapon
  updateAdventure(data: AdventureUpdateInput!, where: AdventureWhereUniqueInput!): Adventure
  deleteUser(where: UserWhereUniqueInput!): User
  deleteAspect(where: AspectWhereUniqueInput!): Aspect
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteStats(where: StatsWhereUniqueInput!): Stats
  deleteWeapon(where: WeaponWhereUniqueInput!): Weapon
  deleteAdventure(where: AdventureWhereUniqueInput!): Adventure
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertAspect(where: AspectWhereUniqueInput!, create: AspectCreateInput!, update: AspectUpdateInput!): Aspect!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  upsertStats(where: StatsWhereUniqueInput!, create: StatsCreateInput!, update: StatsUpdateInput!): Stats!
  upsertWeapon(where: WeaponWhereUniqueInput!, create: WeaponCreateInput!, update: WeaponUpdateInput!): Weapon!
  upsertAdventure(where: AdventureWhereUniqueInput!, create: AdventureCreateInput!, update: AdventureUpdateInput!): Adventure!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyAspects(data: AspectUpdateManyMutationInput!, where: AspectWhereInput): BatchPayload!
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  updateManyStatses(data: StatsUpdateManyMutationInput!, where: StatsWhereInput): BatchPayload!
  updateManyWeapons(data: WeaponUpdateManyMutationInput!, where: WeaponWhereInput): BatchPayload!
  updateManyAdventures(data: AdventureUpdateManyMutationInput!, where: AdventureWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyAspects(where: AspectWhereInput): BatchPayload!
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  deleteManyStatses(where: StatsWhereInput): BatchPayload!
  deleteManyWeapons(where: WeaponWhereInput): BatchPayload!
  deleteManyAdventures(where: AdventureWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  aspects(where: AspectWhereInput, orderBy: AspectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Aspect]!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  statses(where: StatsWhereInput, orderBy: StatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stats]!
  weapons(where: WeaponWhereInput, orderBy: WeaponOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Weapon]!
  adventures(where: AdventureWhereInput, orderBy: AdventureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Adventure]!
  user(where: UserWhereUniqueInput!): User
  aspect(where: AspectWhereUniqueInput!): Aspect
  item(where: ItemWhereUniqueInput!): Item
  stats(where: StatsWhereUniqueInput!): Stats
  weapon(where: WeaponWhereUniqueInput!): Weapon
  adventure(where: AdventureWhereUniqueInput!): Adventure
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  aspectsConnection(where: AspectWhereInput, orderBy: AspectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AspectConnection!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  statsesConnection(where: StatsWhereInput, orderBy: StatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatsConnection!
  weaponsConnection(where: WeaponWhereInput, orderBy: WeaponOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WeaponConnection!
  adventuresConnection(where: AdventureWhereInput, orderBy: AdventureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdventureConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Stats implements Node {
  id: ID!
  healthPoints: Int!
  maxHealthPoints: Int!
  charisma: Int!
  fighting: Int!
  wits: Int!
  weapons(where: WeaponWhereInput, orderBy: WeaponOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Weapon!]
}

"""A connection to a list of items."""
type StatsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StatsEdge]!
  aggregate: AggregateStats!
}

input StatsCreateInput {
  healthPoints: Int
  maxHealthPoints: Int
  charisma: Int
  fighting: Int
  wits: Int
  weapons: WeaponCreateManyInput
}

"""An edge in a connection."""
type StatsEdge {
  """The item at the end of the edge."""
  node: Stats!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StatsOrderByInput {
  id_ASC
  id_DESC
  healthPoints_ASC
  healthPoints_DESC
  maxHealthPoints_ASC
  maxHealthPoints_DESC
  charisma_ASC
  charisma_DESC
  fighting_ASC
  fighting_DESC
  wits_ASC
  wits_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StatsPreviousValues {
  id: ID!
  healthPoints: Int!
  maxHealthPoints: Int!
  charisma: Int!
  fighting: Int!
  wits: Int!
}

type StatsSubscriptionPayload {
  mutation: MutationType!
  node: Stats
  updatedFields: [String!]
  previousValues: StatsPreviousValues
}

input StatsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StatsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StatsWhereInput
}

input StatsUpdateInput {
  healthPoints: Int
  maxHealthPoints: Int
  charisma: Int
  fighting: Int
  wits: Int
  weapons: WeaponUpdateManyInput
}

input StatsUpdateManyMutationInput {
  healthPoints: Int
  maxHealthPoints: Int
  charisma: Int
  fighting: Int
  wits: Int
}

input StatsWhereInput {
  """Logical AND on all given filters."""
  AND: [StatsWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  healthPoints: Int

  """All values that are not equal to given value."""
  healthPoints_not: Int

  """All values that are contained in given list."""
  healthPoints_in: [Int!]

  """All values that are not contained in given list."""
  healthPoints_not_in: [Int!]

  """All values less than the given value."""
  healthPoints_lt: Int

  """All values less than or equal the given value."""
  healthPoints_lte: Int

  """All values greater than the given value."""
  healthPoints_gt: Int

  """All values greater than or equal the given value."""
  healthPoints_gte: Int
  maxHealthPoints: Int

  """All values that are not equal to given value."""
  maxHealthPoints_not: Int

  """All values that are contained in given list."""
  maxHealthPoints_in: [Int!]

  """All values that are not contained in given list."""
  maxHealthPoints_not_in: [Int!]

  """All values less than the given value."""
  maxHealthPoints_lt: Int

  """All values less than or equal the given value."""
  maxHealthPoints_lte: Int

  """All values greater than the given value."""
  maxHealthPoints_gt: Int

  """All values greater than or equal the given value."""
  maxHealthPoints_gte: Int
  charisma: Int

  """All values that are not equal to given value."""
  charisma_not: Int

  """All values that are contained in given list."""
  charisma_in: [Int!]

  """All values that are not contained in given list."""
  charisma_not_in: [Int!]

  """All values less than the given value."""
  charisma_lt: Int

  """All values less than or equal the given value."""
  charisma_lte: Int

  """All values greater than the given value."""
  charisma_gt: Int

  """All values greater than or equal the given value."""
  charisma_gte: Int
  fighting: Int

  """All values that are not equal to given value."""
  fighting_not: Int

  """All values that are contained in given list."""
  fighting_in: [Int!]

  """All values that are not contained in given list."""
  fighting_not_in: [Int!]

  """All values less than the given value."""
  fighting_lt: Int

  """All values less than or equal the given value."""
  fighting_lte: Int

  """All values greater than the given value."""
  fighting_gt: Int

  """All values greater than or equal the given value."""
  fighting_gte: Int
  wits: Int

  """All values that are not equal to given value."""
  wits_not: Int

  """All values that are contained in given list."""
  wits_in: [Int!]

  """All values that are not contained in given list."""
  wits_not_in: [Int!]

  """All values less than the given value."""
  wits_lt: Int

  """All values less than or equal the given value."""
  wits_lte: Int

  """All values greater than the given value."""
  wits_gt: Int

  """All values greater than or equal the given value."""
  wits_gte: Int
  weapons_every: WeaponWhereInput
  weapons_some: WeaponWhereInput
  weapons_none: WeaponWhereInput
}

input StatsWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  aspect(where: AspectSubscriptionWhereInput): AspectSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  stats(where: StatsSubscriptionWhereInput): StatsSubscriptionPayload
  weapon(where: WeaponSubscriptionWhereInput): WeaponSubscriptionPayload
  adventure(where: AdventureSubscriptionWhereInput): AdventureSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  adventures(where: AdventureWhereInput, orderBy: AdventureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Adventure!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  adventures: AdventureCreateManyInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  adventures: AdventureUpdateManyInput
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  adventures_every: AdventureWhereInput
  adventures_some: AdventureWhereInput
  adventures_none: AdventureWhereInput
}

input UserWhereUniqueInput {
  id: ID
}

type Weapon implements Node {
  id: ID!
  title: String!
  effect: String!
}

"""A connection to a list of items."""
type WeaponConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WeaponEdge]!
  aggregate: AggregateWeapon!
}

input WeaponCreateInput {
  title: String!
  effect: String!
}

input WeaponCreateManyInput {
  create: [WeaponCreateInput!]
  connect: [WeaponWhereUniqueInput!]
}

"""An edge in a connection."""
type WeaponEdge {
  """The item at the end of the edge."""
  node: Weapon!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WeaponOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  effect_ASC
  effect_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WeaponPreviousValues {
  id: ID!
  title: String!
  effect: String!
}

input WeaponScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [WeaponScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeaponScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeaponScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  effect: String

  """All values that are not equal to given value."""
  effect_not: String

  """All values that are contained in given list."""
  effect_in: [String!]

  """All values that are not contained in given list."""
  effect_not_in: [String!]

  """All values less than the given value."""
  effect_lt: String

  """All values less than or equal the given value."""
  effect_lte: String

  """All values greater than the given value."""
  effect_gt: String

  """All values greater than or equal the given value."""
  effect_gte: String

  """All values containing the given string."""
  effect_contains: String

  """All values not containing the given string."""
  effect_not_contains: String

  """All values starting with the given string."""
  effect_starts_with: String

  """All values not starting with the given string."""
  effect_not_starts_with: String

  """All values ending with the given string."""
  effect_ends_with: String

  """All values not ending with the given string."""
  effect_not_ends_with: String
}

type WeaponSubscriptionPayload {
  mutation: MutationType!
  node: Weapon
  updatedFields: [String!]
  previousValues: WeaponPreviousValues
}

input WeaponSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WeaponSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeaponSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeaponSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WeaponWhereInput
}

input WeaponUpdateDataInput {
  title: String
  effect: String
}

input WeaponUpdateInput {
  title: String
  effect: String
}

input WeaponUpdateManyDataInput {
  title: String
  effect: String
}

input WeaponUpdateManyInput {
  create: [WeaponCreateInput!]
  connect: [WeaponWhereUniqueInput!]
  disconnect: [WeaponWhereUniqueInput!]
  delete: [WeaponWhereUniqueInput!]
  update: [WeaponUpdateWithWhereUniqueNestedInput!]
  updateMany: [WeaponUpdateManyWithWhereNestedInput!]
  deleteMany: [WeaponScalarWhereInput!]
  upsert: [WeaponUpsertWithWhereUniqueNestedInput!]
}

input WeaponUpdateManyMutationInput {
  title: String
  effect: String
}

input WeaponUpdateManyWithWhereNestedInput {
  where: WeaponScalarWhereInput!
  data: WeaponUpdateManyDataInput!
}

input WeaponUpdateWithWhereUniqueNestedInput {
  where: WeaponWhereUniqueInput!
  data: WeaponUpdateDataInput!
}

input WeaponUpsertWithWhereUniqueNestedInput {
  where: WeaponWhereUniqueInput!
  update: WeaponUpdateDataInput!
  create: WeaponCreateInput!
}

input WeaponWhereInput {
  """Logical AND on all given filters."""
  AND: [WeaponWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeaponWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeaponWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  effect: String

  """All values that are not equal to given value."""
  effect_not: String

  """All values that are contained in given list."""
  effect_in: [String!]

  """All values that are not contained in given list."""
  effect_not_in: [String!]

  """All values less than the given value."""
  effect_lt: String

  """All values less than or equal the given value."""
  effect_lte: String

  """All values greater than the given value."""
  effect_gt: String

  """All values greater than or equal the given value."""
  effect_gte: String

  """All values containing the given string."""
  effect_contains: String

  """All values not containing the given string."""
  effect_not_contains: String

  """All values starting with the given string."""
  effect_starts_with: String

  """All values not starting with the given string."""
  effect_not_starts_with: String

  """All values ending with the given string."""
  effect_ends_with: String

  """All values not ending with the given string."""
  effect_not_ends_with: String
}

input WeaponWhereUniqueInput {
  id: ID
}
